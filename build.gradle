projects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
}

dependencies {
    def withoutLog = {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
        exclude group: 'org.slf4j', module: 'log4j-over-slf4j'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
        exclude group: 'org.slf4j', module: 'jcl-over-slf4j'
    }

    implementation(group: 'io.split', name: 'qos-dtos', version: '1.11')
    implementation 'org.slf4j:slf4j-api:1.7.30'
    implementation 'org.slf4j:log4j-over-slf4j:1.7.30'
    implementation 'org.slf4j:jul-to-slf4j:1.7.30'
    implementation 'org.slf4j:jcl-over-slf4j:1.7.30'
    implementation 'ch.qos.logback:logback-classic:1.2.3'

    // QOS Dropwizard
    implementation 'javax.inject:javax.inject:1'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'io.dropwizard:dropwizard-core:2.0.0', withoutLog
    implementation 'io.dropwizard:dropwizard-client:2.0.0', withoutLog
    implementation 'io.dropwizard:dropwizard-forms:2.0.0', withoutLog
    testImplementation 'io.dropwizard:dropwizard-testing:2.0.0', withoutLog

    // Method and Suite
    implementation 'com.beust:jcommander:1.78'

    // PagerDuty Integration
    implementation 'com.github.dikhan:pagerduty-client:2.0.2', withoutLog

    // Slack
    implementation("com.slack.api:bolt:1.1.+")
    implementation('com.slack.api:bolt-servlet:1.1.+')
    implementation('com.slack.api:bolt-jetty:1.1.+')


    // Common
    implementation(group: 'com.google.guava', name: 'guava', version: '19.0')
    implementation 'com.google.inject:guice:4.2.2'
    implementation 'com.google.inject.extensions:guice-assistedinject:4.0'
    implementation 'org.mockito:mockito-core:1.9.5'
    implementation 'org.hamcrest:hamcrest-all:1.3'
    implementation 'junit:junit:4.13'
    implementation 'commons-lang:commons-lang:2.6'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation 'javax.activation:activation:1.1'
    implementation 'com.datadoghq:java-dogstatsd-client:2.10.3'
    implementation 'javax.websocket:javax.websocket-api:1.1'
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.13.1'
}

buildscript {
    repositories {
        maven {
            url "https://splitio.jfrog.io/artifactory/maven-dev"
            credentials {
                username = project.findProperty('artifactoryUser') ?: "$System.env.ARTIFACTORY_USER"
                password = project.findProperty('artifactoryPassword') ?: "$System.env.ARTIFACTORY_TOKEN"
            }
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
    maven {
        url "https://splitio.jfrog.io/artifactory/maven-all-virtual/"
        credentials {
            username = project.findProperty('artifactoryUser') ?: "$System.env.ARTIFACTORY_USER"
            password = project.findProperty('artifactoryPassword') ?: "$System.env.ARTIFACTORY_TOKEN"
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocTask(type: Javadoc) {
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadocTask) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task fatJar(type: Jar) {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

wrapper {
    gradleVersion = '6.9'
    distributionUrl = distributionUrl.replace("bin", "all")
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            version = project.version
            artifact fatJar
            pom {
                name = 'qos-runner'
                description = 'QOS runner'
            }
        }
    }
    repositories {
        maven {
            url = "https://splitio.jfrog.io/artifactory/maven-dev"
            credentials {
                username = project.findProperty('artifactoryUser') ?: "$System.env.ARTIFACTORY_USER"
                password = project.findProperty('artifactoryPassword') ?: "$System.env.ARTIFACTORY_TOKEN"
            }
        }
    }
}
